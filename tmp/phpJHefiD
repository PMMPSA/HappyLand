name: SAC
main: DarkWav\SAC\SAC
version: 2018-11-11
load: STARTUP
author: DarkWav
api: [3.0.0,4.0.0]
commands:
      shadowanticheat:
           description: Shows ShadowAntiCheat version
           aliases: ["ShadowAntiCheat","AntiCheat","SAC"]
      sac:
           description: Shows ShadowAntiCheat version
           aliases: ["ShadowAntiCheat","AntiCheat","SAC"]
      sacmodules:
           description: Shows loaded ShadowAntiCheat modules
           aliases: ["ShadowAntiCheat","AntiCheat","SAC","Modules"]
      sacauramodules:
           description: Shows loaded ShadowAntiCheat KillAura Check modules
           aliases: ["ShadowAntiCheat","AntiCheat","SAC","Modules"]
permissions:
    sac:
        description: "Allows to use all SAC features."
        default: false
        children:
            sac.admin:
                description: "Get notified when someone is hacking."
                default: op
            sac.fly:
                description: "A permission."
                default: false
            sac.glide:
                description: "A permission."
                default: false
            sac.speed:
                description: "A permission."
                default: false
            sac.noclip:
                description: "A permission."
                default: false
            sac.reach:
                description: "A permission."
                default: false
            sac.killaura:
                description: "A permission."
                default: false
            sac.regen:
                description: "A permission."
                default: false
#//////////////////////////////////////////////////////
#//                                                  //
#//     SAC by DarkWav.                              //
#//     Distributed under the GGPL License.          //
#//     Copyright (C) 2018 DarkWav                   //
#//                                                  //
#//////////////////////////////////////////////////////
<?php

declare(strict_types=0);

namespace DarkWav\SAC;

use pocketmine\plugin\PluginBase;
use pocketmine\utils\TextFormat;
use pocketmine\command\CommandSender;
use pocketmine\command\Command;
use pocketmine\utils\Config;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\Player;
use pocketmine\Plugin;
use pocketmine\plugin\PluginLoader;
use pocketmine\scheduler\Task;
use pocketmine\scheduler\TaskScheduler;

use DarkWav\SAC\EventListener;
use DarkWav\SAC\Observer;
use DarkWav\SAC\KickTask;

class SAC extends PluginBase
{
  public $Config;
  public $Logger;
  public $cl;
  public $cl2;
  public $cl3;
  public $moldulecount;
  public $PlayerObservers = array();
  public $PlayersToKick   = array();

  public function onEnable() : void
  {
    $this->getScheduler()->scheduleRepeatingTask(new KickTask($this), 1);
    @mkdir($this->getDataFolder());
    $this->saveDefaultConfig();
    $this->saveResource("AntiForceOP-Guide.txt");
    $this->saveResource("LegitOPs.yml");
    $cl              = $this->getConfig()->get("Color");
    if ($this->getConfig()->get("ColorEverything"))
    {
      $this->cl2 = $this->getConfig()->get("Color");
    }
    else
    {
      $this->cl2 = "f";
    }
    if ($this->getConfig()->get("ColorEverything"))
    {
      $this->cl3 = "5";
    }
    else
    {
      $this->cl3 = "f";
    }

    $Config = $this->getConfig();
    $Logger = $this->getServer()->getLogger();
    $Server = $this->getServer();
    $Logger->info(TextFormat::ESCAPE."$this->cl3"."[ShadowAPI] > ShadowAPI Loaded");
    $this->getServer()->getPluginManager()->registerEvents(new EventListener($this), $this);
    $Logger->info(TextFormat::ESCAPE."$this->cl2" . "[SAC] > ShadowAntiCheat Activated"            );
    $Logger->info(TextFormat::ESCAPE."$this->cl2" . "[SAC] > ShadowAntiCheat Unstable v2018-11-11 [Abyss]".TextFormat::ESCAPE."$this->cl3"." @ ShadowAPI 1.2 [Ghost]");
    $this->moldulecount = 0;
    if($Config->get("ForceOP"    )) $this->moldulecount++;
    if($Config->get("NoClip"     )) $this->moldulecount++;
    if($Config->get("Fly"        )) $this->moldulecount++;
    if($Config->get("Fly"        )) $this->moldulecount++;
    if($Config->get("Glide"      )) $this->moldulecount++;
    if($Config->get("KillAura"   )) $this->moldulecount++;
    if($Config->get("Reach"      )) $this->moldulecount++;
    if($Config->get("Speed"      )) $this->moldulecount++;
    if($Config->get("FastBow"    )) $this->moldulecount++;
    if($Config->get("Regen"      )) $this->moldulecount++;
    $Logger->info(TextFormat::ESCAPE."$this->cl2" . "[SAC] > Loaded $this->moldulecount Modules");
    $Logger->info(TextFormat::ESCAPE."$this->cl2" . "[SAC] > For more information type /sac or /sacmodules or /sacauramodules");
    $configversion = $Config->get("Config-Version");
    switch($configversion)
    {
      case "2018-11-11":
        break;
      default:
        $Logger->warning(TextFormat::YELLOW."[SAC] > Your Config is out of date!");
        break;
    }
    $pluginversion = $Config->get("Plugin-Version");
    switch($pluginversion)
    {
        case "2018-11-11":
          break;
        default:
        $Logger->error(TextFormat::RED."[SAC] > Your Config is incompatible with this plugin version, please update immediately!");
        $Server->getPluginManager()->disablePlugin($this);
        break;
    }

    foreach($Server->getOnlinePlayers() as $player)
    {
      $hash     = spl_object_hash($player);
      $name     = $player->getName();
      $oldhash  = null;
      $observer = null;

      foreach ($this->PlayerObservers as $key=>$obs)
      {
        if ($obs->PlayerName == $name)
        {
          $oldhash  = $key;
          $observer = $obs;
          $observer->Player = $player;
        }
      }
      if ($oldhash != null)
      {
        unset($this->PlayerObservers[$oldhash]);
        $this->PlayerObservers[$hash] = $observer;
        $this->PlayerObservers[$hash]->PlayerRejoin();
      }
      else
      {
        $observer = new Observer($player, $this);
        $this->PlayerObservers[$hash] = $observer;
        $this->PlayerObservers[$hash]->PlayerJoin();
      }
    }
  }

  public function onDisable() : void
  {
    $cl     = $this->getConfig()->get("Color");
    $Logger = $this->getServer()->getLogger();
    $Server = $this->getServer();
    $Config = $this->getConfig();
    $Logger->info(TextFormat::ESCAPE."$this->cl2"."[SAC] > ShadowAntiCheat Deactivated");
    $Logger->info(TextFormat::ESCAPE."$this->cl3"."[ShadowAPI] > ShadowAPI Unloaded");
  }

  public function onCommand(CommandSender $sender, Command $command, string $label, array $args) : bool
  {
    $Logger            = $this->getServer()->getLogger();
    $cl                = $this->getConfig()->get("Color");
    $LegitOPsYML       = new Config($this->getDataFolder() . "LegitOPs.yml", Config::YAML);
    $Config            = $this->getConfig();
    if ($this->getConfig()->get("ForceOP"))
    {
      if ($sender->isOp())
      {
        if (!in_array($sender->getName(), $LegitOPsYML->get("LegitOPs")))
        {
          if ($sender instanceof Player)
          {
            $sname = $sender->getName();
            $message  = "[SAC] > $sname used ForceOP!";
            $this->NotifyAdmins($message);
            $sender->getPlayer()->kick(TextFormat::ESCAPE."$cl"."[SAC] > ForceOP detected!");
          }
        }
      }
    }
    if ($command->getName() === "sac" or $command->getName() === "shadowanticheat")
    {
      $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > ShadowAntiCheat Unstable v2018-11-11 [Abyss]" . TextFormat::DARK_PURPLE." @ ShadowAPI 1.2 [Ghost] " . TextFormat::ESCAPE ."$cl". "by DarkWav");
    }
    if((!$sender instanceof Player) or ($sender->isOp())){
    if ($command->getName() === "sacmodules")
    {
      if($Config->get("ForceOP"    )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > ForceOP:  ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > ForceOP:  ".TextFormat::RED."Disabled");}
      if($Config->get("NoClip"     )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > NoClip:   ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > NoClip:   ".TextFormat::RED."Disabled");}
      if($Config->get("Fly"        )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Fly:      ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Fly:      ".TextFormat::RED."Disabled");}
      if($Config->get("Fly"        )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Spider:   ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Spider:   ".TextFormat::RED."Disabled");}
      if($Config->get("Glide"      )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Glide:    ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Glide:    ".TextFormat::RED."Disabled");}
      if($Config->get("KillAura"   )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > KillAura: ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > KillAura: ".TextFormat::RED."Disabled");}
      if($Config->get("Reach"      )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Reach:    ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Reach:    ".TextFormat::RED."Disabled");}
      if($Config->get("Speed"      )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Speed:    ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Speed:    ".TextFormat::RED."Disabled");}
      if($Config->get("FastBow"    )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > FastBow:  ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > FastBow:  ".TextFormat::RED."Disabled");}
      if($Config->get("Regen"      )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Regen:    ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Regen:    ".TextFormat::RED."Disabled");}
      $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Currently $this->moldulecount Modules are Active");
    }
    if ($command->getName() === "sacauramodules")
    {
      if($Config->get("Angle"              )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Angle:               ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Angle:               ".TextFormat::RED."Disabled");}
      if($Config->get("FastClick"          )){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > FastClick:           ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > FastClick:           ".TextFormat::RED."Disabled");}
      if($Config->get("Heuristics"    ) != 0){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Heuristics:          ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Heuristics:          ".TextFormat::RED."Disabled");}
      if($Config->get("Heuristics"    ) == 1){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Heuristics-Mode:     ".TextFormat::GREEN."Permissive");}
      if($Config->get("Heuristics"    ) == 2){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Heuristics-Mode:     ".TextFormat::YELLOW."Normal");}
      if($Config->get("Heuristics"    ) == 3){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > Heuristics-Mode:     ".TextFormat::GOLD."Aggressive");}
      if($Config->get("DeepHeuristics") != 0){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > DeepHeuristics:      ".TextFormat::GREEN."Active");}else{ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > DeepHeuristics:      ".TextFormat::RED."Disabled");}
      if($Config->get("DeepHeuristics") == 1){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > DeepHeuristics-Mode: ".TextFormat::GREEN."Permissive");}
      if($Config->get("DeepHeuristics") == 2){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > DeepHeuristics-Mode: ".TextFormat::YELLOW."Normal");}
      if($Config->get("DeepHeuristics") == 3){ $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > DeepHeuristics-Mode: ".TextFormat::GOLD."Aggressive");}
    }
    }
    elseif ($command->getName() === "sacauramodules" or $command->getName() === "sacmodules")
    {
      $sender->sendMessage(TextFormat::ESCAPE."$cl"."[SAC] > You are not allowed to use this Command!");
    }
    return false;
  }

  public function NotifyAdmins($message) : void
  {
    $cl              = $this->getConfig()->get("Color");
    if($this->getConfig()->get("Verbose"))
    {
      foreach ($this->PlayerObservers as $observer)
      {
        $player = $observer->Player;
        if ($player != null and $player->hasPermission("sac.admin"))
        {
          $player->sendMessage(TextFormat::ESCAPE."$cl" . $message);
        }
      }
    }
  }

}

//////////////////////////////////////////////////////
//                                                  //
//     SAC by DarkWav.                              //
//     Distributed under the GGPL License.          //
//     Copyright (C) 2018 DarkWav                   //
//                                                  //
//////////////////////////////////////////////////////
<?php

declare(strict_types=0);

namespace DarkWav\SAC;

use pocketmine\utils\TextFormat;
use pocketmine\command\ConsoleCommandSender;
use pocketmine\plugin\Plugin;
use pocketmine\scheduler\Task;
use pocketmine\scheduler\TaskScheduler;
//use pocketmine\Server;

use DarkWav\SAC\Observer;
use DarkWav\SAC\SAC;

class KickTask extends Task
{

  public function __construct(SAC $Main)
  {
    $this->plugin = $Main;
  }

  public function onRun(int $currentTick) : void
  {
    $cl = $this->plugin->getConfig()->get("Color");
    foreach($this->plugin->PlayersToKick as $key=>$obs)
    {
      $obs->PlayerBanCounter++;
      if ($obs->PlayerBanCounter > 0 and $obs->PlayerBanCounter == $this->plugin->getConfig()->get("Max-Hacking-Times"))
      {
        foreach($this->plugin->getConfig()->get("MaxHackingExceededCommands") as $command)
        {
          $send = $obs->ScanMessage($command);
          $this->plugin->getServer()->dispatchCommand(new ConsoleCommandSender(), $send);
          if($this->plugin->getConfig()->get("BanPlayerMessageBool"))
          {
            $bmsg = $this->plugin->getConfig()->get("BanPlayerMessage");
            $sbmsg = $obs->ScanMessage($bmsg);
            $this->plugin->getServer()->broadcastMessage(TextFormat::ESCAPE."$cl" . $sbmsg);
          }
        }
        $obs->PlayerBanCounter = 0;
      }
      if ($obs->Player != null && $obs->Player->isOnline())
      {
        $obs->Player->kick(TextFormat::ESCAPE."$cl" . $obs->KickMessage);
        if($this->plugin->getConfig()->get("KickPlayerMessageBool"))
        {
          $msg = $this->plugin->getConfig()->get("KickPlayerMessage");
          $smsg = $obs->ScanMessage($msg);
          $this->plugin->getServer()->broadcastMessage(TextFormat::ESCAPE."$cl" . $smsg);
        }
      }
      unset ($this->plugin->PlayersToKick[$key]);
    }
  }
}

//////////////////////////////////////////////////////
//                                                  //
//     SAC by DarkWav.                              //
//     Distributed under the GGPL License.          //
//     Copyright (C) 2018 DarkWav                   //
//                                                  //
//////////////////////////////////////////////////////
#######################################################
# USE THIS AT YOUR OWN RISK. I GUARANTEE FOR NOTHING! #
#######################################################
This will teach you how to use AntiForceOP.

Step 1: Enter ALL of your OP's names in LegitOPs.yml!

Step 2: Enabling in config:

        Set "ForceOP" to "true"

Step 3: Now Restart your server.

Step 4: You are now protected against ForceOP! Don't forget to enter you new OPs names in LegitOPs.yml BEFORE OPing them!

Have fun with this tool!

//////////////////////////////////////////////////////
//                                                  //
//     SAC by DarkWav.                              //
//     Distributed under the GGPL License.          //
//     Copyright (C) 2018 DarkWav                   //
//                                                  //
//////////////////////////////////////////////////////
#Add ALL names of your actual OPs below if you use AntiForceOP!
   LegitOPs:

   - "admin"
   - "secondadmin"
   - "thirdadmin"

#//////////////////////////////////////////////////////
#//                                                  //
#//     SAC by DarkWav.                              //
#//     Distributed under the GGPL License.          //
#//     Copyright (C) 2018 DarkWav                   //
#//                                                  //
#//////////////////////////////////////////////////////
...
<?php

declare(strict_types=0);

namespace DarkWav\SAC;

use pocketmine\plugin\PluginBase;
use pocketmine\command\ConsoleCommandSender;
use pocketmine\utils\TextFormat;
use pocketmine\event\Listener;
use pocketmine\utils\Config;
use pocketmine\permission\Permission;
use pocketmine\math\Vector3;
use pocketmine\Player;

use pocketmine\event\entity\Effect;
use pocketmine\event\Cancellable;

use pocketmine\event\entity\EntityDamageByEntityEvent;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\event\entity\EntityRegainHealthEvent;
use pocketmine\event\entity\EntityLevelChangeEvent;
use pocketmine\event\entity\EntityTeleportEvent;
use pocketmine\event\entity\EntityShootBowEvent;
use pocketmine\event\entity\EntityMotionEvent;

use pocketmine\event\player\PlayerMoveEvent;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\event\player\PlayerQuitEvent;
use pocketmine\event\player\PlayerRespawnEvent;
use pocketmine\event\player\PlayerDeathEvent;

use DarkWav\SAC\SAC;
use DarkWav\SAC\Observer;

class EventListener implements Listener
{
  public $Main;
  public $Logger;
  public $Server;

  public function __construct(SAC $Main)
  {
    $this->Main   = $Main;
    $this->Logger = $Main->getServer()->getLogger();
    $this->Server = $Main->getServer();
  }

  public function onJoin(PlayerJoinEvent $event) : void
  {
    $player   = $event->getPlayer();
    $hash     = spl_object_hash($player);
    $name     = $player->getName();

    $oldhash  = null;
    $observer = null;
    /*
    $player->setScale(5);
    //For testing purposes
    */

    foreach ($this->Main->PlayerObservers as $key=>$obs)
    {
      if ($obs->PlayerName == $name)
      {
        $oldhash  = $key;
        $observer = $obs;
        $observer->Player = $player;
      }
    }

    if ($oldhash != null)
    {
      unset($this->Main->PlayerObservers[$oldhash]);
      $this->Main->PlayerObservers[$hash] = $observer;
      $this->Main->PlayerObservers[$hash]->PlayerRejoin();
    }
    else
    {
      $observer = new Observer($player, $this->Main);
      $this->Main->PlayerObservers[$hash] = $observer;
      $this->Main->PlayerObservers[$hash]->PlayerJoin();
    }
  }

  public function onQuit(PlayerQuitEvent $event) : void
  {
    $player   = $event->getPlayer();
    $hash     = spl_object_hash($player);

    if (!empty($player) and !empty($hash) and array_key_exists($hash , $this->Main->PlayerObservers))
    {
      $observer = $this->Main->PlayerObservers[$hash];
      if (!empty($observer))
      {
        $observer->PlayerQuit();
      }
      $this->Main->PlayerObservers[$hash]->Player = null;
    }
  }


  public function onMove(PlayerMoveEvent $event) : void
  {
    $player   = $event->getPlayer();
    $hash     = spl_object_hash($player);

    if (array_key_exists($hash , $this->Main->PlayerObservers))
    {
      if($player != null and $this->Main->PlayerObservers[$hash]->Player != null)
      {
        $this->Main->PlayerObservers[$hash]->OnMove($event);
        /*
        //THIS IS IN-DEV AND NOT USEABLE
        $this->Main->PlayerObservers[$hash]->getRealKnockBack($event);
        */
      }
    }
  }

  public function onEntityMotionEvent(EntityMotionEvent $event) : void
  {
    $ThisEntity = $event->getEntity();
    $hash     = spl_object_hash($event->getEntity());
    if($ThisEntity instanceof Player)
    {
      if (array_key_exists($hash , $this->Main->PlayerObservers))
      {
        if($ThisEntity != null and $this->Main->PlayerObservers[$hash]->Player != null)
        {
          $this->Main->PlayerObservers[$hash]->OnMotion($event);
        }
      }
    }
  }

  public function onEntityRegainHealthEvent(EntityRegainHealthEvent $event) : void
  {
    if ($event->getRegainReason() != EntityDamageEvent::CAUSE_MAGIC and $event->getRegainReason() != EntityDamageEvent::CAUSE_CUSTOM)
    {
      $hash = spl_object_hash($event->getEntity());
      $ThisEntity = $event->getEntity();
      if (array_key_exists($hash , $this->Main->PlayerObservers))
      {
        if(($ThisEntity instanceof Player) and ($ThisEntity != null) and ($this->Main->PlayerObservers[$hash]->Player != null))
        {
          $this->Main->PlayerObservers[$hash]->PlayerRegainHealth($event);
        }
      }
    }
  }

  public function onDamage(EntityDamageEvent $event) : void
  {
    $evname = $event->getEventName();
    $ThisEntity = $event->getEntity();
    $hash = spl_object_hash($ThisEntity);
    if (array_key_exists($hash , $this->Main->PlayerObservers))
    {
      if(($ThisEntity instanceof Player) and ($ThisEntity != null) and ($this->Main->PlayerObservers[$hash]->Player != null))
      {
        $this->Main->PlayerObservers[$hash]->PlayerWasDamaged($event);
      }
    }
    if ($event instanceof EntityDamageByEntityEvent)
    {
      $ThisDamager = $event->getDamager();
      $hash = spl_object_hash($ThisDamager);
      if (array_key_exists($hash , $this->Main->PlayerObservers))
      {
        if(($ThisDamager instanceof Player) and ($ThisDamager != null) and ($this->Main->PlayerObservers[$hash]->Player != null))
        {
          if ($event->getCause() == EntityDamageEvent::CAUSE_ENTITY_ATTACK)
          {
            $this->Main->PlayerObservers[$hash]->PlayerHasDamaged($event);
          }
        }
      }
    }
  }

  public function onEntityShootBowEvent(EntityShootBowEvent $event) : void
  {
    $ThisEntity = $event->getEntity();
    $hash = spl_object_hash($ThisEntity);
    if (array_key_exists($hash , $this->Main->PlayerObservers))
    {
      if(($ThisEntity instanceof Player) and ($ThisEntity != null) and ($this->Main->PlayerObservers[$hash]->Player != null))
      {
        $this->Main->PlayerObservers[$hash]->PlayerShotArrow($event);
      }
    }
  }

  public function onPlayerDeathEvent(PlayerDeathEvent $event) : void
  {
    $player   = $event->getPlayer();
    $hash     = spl_object_hash($player);
    if (array_key_exists($hash , $this->Main->PlayerObservers))
    {
      if($player != null and $this->Main->PlayerObservers[$hash]->Player != null)
      {
        $this->Main->PlayerObservers[$hash]->onDeath($event);
      }
    }
  }

  public function onPlayerRespawnEvent(PlayerRespawnEvent $event) : void
  {
    $player   = $event->getPlayer();
    $hash     = spl_object_hash($player);
    if (array_key_exists($hash , $this->Main->PlayerObservers))
    {
      if($player != null and $this->Main->PlayerObservers[$hash]->Player != null)
      {
        $this->Main->PlayerObservers[$hash]->onRespawn($event);
      }
    }
  }

  //public function onEntityLevelChangeEvent(EntityLevelChangeEvent $event)
  //{
  //  $hash = spl_object_hash($event->getEntity());
  //  if (array_key_exists($hash , $this->Main->PlayerObservers))
  //  {
  //    $this->Main->PlayerObservers[$hash]->onWorldChange($event);
  //  }
  //}

  public function onEntityTeleportEvent(EntityTeleportEvent $event) : void
  {
    $ThisEntity = $event->getEntity();
    $hash = spl_object_hash($event->getEntity());
    if($ThisEntity instanceof Player)
    {
      if (array_key_exists($hash , $this->Main->PlayerObservers))
      {
        if($ThisEntity != null and $this->Main->PlayerObservers[$hash]->Player != null)
        {
          $this->Main->PlayerObservers[$hash]->onTeleport($event);
        }
      }
    }
  }
}

//////////////////////////////////////////////////////
//                                                  //
//     SAC by DarkWav.                              //
//     Distributed under the GGPL License.          //
//     Copyright (C) 2018 DarkWav                   //
//                                                  //
//////////////////////////////////////////////////////
