<?php
declare(strict_types = 1);

/**
 *     _____                    _   _           _
 *    /  ___|                  | | | |         | |
 *    \ `--.  ___ ___  _ __ ___| |_| |_   _  __| |
 *     `--. \/ __/ _ \| '__/ _ \  _  | | | |/ _` |
 *    /\__/ / (_| (_) | | |  __/ | | | |_| | (_| |
 *    \____/ \___\___/|_|  \___\_| |_/\__,_|\__,_|
 *
 * ScoreHud, a Scoreboard plugin for PocketMine-MP
 * Copyright (c) 2018 JackMD  < https://github.com/JackMD >
 *
 * Discord: JackMD#3717
 * Twitter: JackMTaylor_
 *
 * This software is distributed under "GNU General Public License v3.0".
 * This license allows you to use it and/or modify it but you are not at
 * all allowed to sell this plugin at any cost. If found doing so the
 * necessary action required would be taken.
 *
 * ScoreHud is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License v3.0 for more details.
 *
 * You should have received a copy of the GNU General Public License v3.0
 * along with this program. If not, see
 * <https://opensource.org/licenses/GPL-3.0>.
 * ------------------------------------------------------------------------
 */

namespace JackMD\ScoreHud;

use _64FF00\PurePerms\PurePerms;
use FactionsPro\FactionMain;
use JackMD\CPS\CPS;
use JackMD\KDR\KDR;
use JackMD\ScoreHud\libs\JackMD\ScoreFactory\ScoreFactory;
use JackMD\ScoreHud\task\ScoreUpdateTask;
use onebone\economyapi\EconomyAPI;
use pocketmine\Player;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;
use rankup\RankUp;

class Main extends PluginBase{
	
	/** @var string */
	private const CONFIG_VERSION = 3;
	
	public function onEnable(): void{
		$this->checkScoreFactory();
		$this->saveDefaultConfig();
		$this->checkConfig();
		$this->setTimezone($this->getConfig()->get("timezone"));
		$this->getServer()->getPluginManager()->registerEvents(new EventListener($this), $this);
		$this->getScheduler()->scheduleRepeatingTask(new ScoreUpdateTask($this), (int) $this->getConfig()->get("update-interval") * 20);
		$this->getLogger()->info("ScoreHud Plugin Enabled.");
	}
	
	/**
	 * Checks if ScoreFactory virion is present or not.
	 */
	private function checkScoreFactory(): void{
		if(!class_exists(ScoreFactory::class)){
			throw new \RuntimeException("ScoreHud plugin will only work if you use the plugin phar from Poggit.");
		}
	}
	
	/**
	 * Check if the config is up-to-date.
	 */
	public function checkConfig(): void{
		$config = new Config($this->getDataFolder() . "config.yml", Config::YAML);
		if((!$config->exists("config-version")) || ($config->get("config-version") !== self::CONFIG_VERSION)){
			rename($this->getDataFolder() . "config.yml", $this->getDataFolder() . "config_old.yml");
			$this->saveResource("config.yml");
			$this->getLogger()->critical("Your configuration file is outdated.");
			$this->getLogger()->notice("Your old configuration has been saved as config_old.yml and a new configuration file has been generated.");
			return;
		}
	}
	
	/**
	 * @param $timezone
	 * @return mixed
	 */
	private function setTimezone($timezone){
		if($timezone !== false){
			$this->getLogger()->notice("Server timezone successfully set to " . $timezone);
			return @date_default_timezone_set($timezone);
		}
		return false;
	}
	
	/**
	 * @param Player $player
	 * @param string $title
	 */
	public function addScore(Player $player, string $title): void{
		ScoreFactory::setScore($player, $title);
		$this->updateScore($player);
	}
	
	/**
	 * @param Player $player
	 */
	public function updateScore(Player $player): void{
		$i = 0;
		foreach($this->getConfig()->get("score-lines") as $line){
			$i++;
			if($i <= 15){
				ScoreFactory::setScoreLine($player, $i, $this->process($player, $line));
			}
		}
	}
	
	/**
	 * @param Player $player
	 * @return float|string
	 */
	private function getPlayerMoney(Player $player){
		/** @var EconomyAPI $economyAPI */
		$economyAPI = $this->getServer()->getPluginManager()->getPlugin("EconomyAPI");
		if($economyAPI instanceof EconomyAPI){
			return $economyAPI->myMoney($player);
		}else{
			return "Plugin not found";
		}
	}
	
	/**
	 * @param Player $player
	 * @return string
	 */
	private function getPlayerRank(Player $player): string{
		/** @var PurePerms $purePerms */
		$purePerms = $this->getServer()->getPluginManager()->getPlugin("PurePerms");
		if($purePerms instanceof PurePerms){
			$group = $purePerms->getUserDataMgr()->getData($player)['group'];
			if($group !== null){
				return $group;
			}else{
				return "No Rank";
			}
		}else{
			return "Plugin not found";
		}
	}
	
	/**
	 * @param Player $player
	 * @param null   $levelName
	 * @return string
	 */
	public function getPrefix(Player $player, $levelName = null): string{
		/** @var PurePerms $purePerms */
		$purePerms = $this->getServer()->getPluginManager()->getPlugin("PurePerms");
		if($purePerms instanceof PurePerms){
			$prefix = $purePerms->getUserDataMgr()->getNode($player, "prefix");
			if($levelName === null){
				if(($prefix === null) || ($prefix === "")){
					return "No Prefix";
				}
				return (string) $prefix;
			}else{
				$worldData = $purePerms->getUserDataMgr()->getWorldData($player, $levelName);
				if(empty($worldData["prefix"]) || $worldData["prefix"] == null){
					return "No Prefix";
				}
				return $worldData["prefix"];
			}
		}else{
			return "Plugin not found";
		}
	}
	
	/**
	 * @param Player $player
	 * @param null   $levelName
	 * @return string
	 */
	public function getSuffix(Player $player, $levelName = null): string{
		/** @var PurePerms $purePerms */
		$purePerms = $this->getServer()->getPluginManager()->getPlugin("PurePerms");
		if($purePerms instanceof PurePerms){
			$suffix = $purePerms->getUserDataMgr()->getNode($player, "suffix");
			if($levelName === null){
				if(($suffix === null) || ($suffix === "")){
					return "No Suffix";
				}
				return (string) $suffix;
			}else{
				$worldData = $purePerms->getUserDataMgr()->getWorldData($player, $levelName);
				if(empty($worldData["suffix"]) || $worldData["suffix"] == null){
					return "No Suffix";
				}
				return $worldData["suffix"];
			}
		}else{
			return "Plugin not found";
		}
	}
	
	/**
	 * @param Player $player
	 * @return bool|int|string
	 */
	private function getPlayerPrisonRank(Player $player){
		/** @var RankUp $rankUp */
		$rankUp = $this->getServer()->getPluginManager()->getPlugin("RankUp");
		if($rankUp instanceof RankUp){
			$group = $rankUp->getRankUpDoesGroups()->getPlayerGroup($player);
			if($group !== false){
				return $group;
			}else{
				return "No Rank";
			}
		}
		return "Plugin not found";
	}
	
	/**
	 * @param Player $player
	 * @return string
	 */
	public function getPlayerFaction(Player $player): string{
		/** @var FactionMain $factionsPro */
		$factionsPro = $this->getServer()->getPluginManager()->getPlugin("FactionsPro");
		if($factionsPro instanceof FactionMain){
			$factionName = $factionsPro->getPlayerFaction($player->getName());
			if($factionName == null){
				return "No Faction";
			}
			return $factionName;
		}
		return "Plugin not found";
	}
	
	/**
	 * @param Player $player
	 * @return int|string
	 */
	public function getPlayerKills(Player $player){
		/** @var KDR $kdr */
		$kdr = $this->getServer()->getPluginManager()->getPlugin("KDR");
		if($kdr instanceof KDR){
			return $kdr->getProvider()->getPlayerKillPoints($player);
		}else{
			return "Plugin Not Found";
		}
	}
	
	/**
	 * @param Player $player
	 * @return int|string
	 */
	public function getPlayerDeaths(Player $player){
		/** @var KDR $kdr */
		$kdr = $this->getServer()->getPluginManager()->getPlugin("KDR");
		if($kdr instanceof KDR){
			return $kdr->getProvider()->getPlayerDeathPoints($player);
		}else{
			return "Plugin Not Found";
		}
	}
	
	/**
	 * @param Player $player
	 * @return string
	 */
	public function getPlayerKillToDeathRatio(Player $player): string{
		/** @var KDR $kdr */
		$kdr = $this->getServer()->getPluginManager()->getPlugin("KDR");
		if($kdr instanceof KDR){
			return $kdr->getProvider()->getKillToDeathRatio($player);
		}else{
			return "Plugin Not Found";
		}
	}
	
	public function getClicks(Player $player){
		/** @var CPS $cps */
		$cps = $this->getServer()->getPluginManager()->getPlugin("CPS");
		if($cps instanceof CPS){
			return $cps->getClicks($player);
		}else{
			return "Plugin Not Found";
		}
	}
	
	/**
	 * @param Player $player
	 * @param string $string
	 * @return string
	 */
	public function process(Player $player, string $string): string{
		$string = str_replace("{name}", $player->getName(), $string);
		$string = str_replace("{money}", $this->getPlayerMoney($player), $string);
		$string = str_replace("{online}", count($this->getServer()->getOnlinePlayers()), $string);
		$string = str_replace("{max_online}", $this->getServer()->getMaxPlayers(), $string);
		$string = str_replace("{rank}", $this->getPlayerRank($player), $string);
		$string = str_replace("{prison_rank}", $this->getPlayerPrisonRank($player), $string);
		$string = str_replace("{item_name}", $player->getInventory()->getItemInHand()->getName(), $string);
		$string = str_replace("{item_id}", $player->getInventory()->getItemInHand()->getId(), $string);
		$string = str_replace("{item_meta}", $player->getInventory()->getItemInHand()->getDamage(), $string);
		$string = str_replace("{item_count}", $player->getInventory()->getItemInHand()->getCount(), $string);
		$string = str_replace("{x}", intval($player->getX()), $string);
		$string = str_replace("{y}", intval($player->getY()), $string);
		$string = str_replace("{z}", intval($player->getZ()), $string);
		$string = str_replace("{faction}", $this->getPlayerFaction($player), $string);
		$string = str_replace("{load}", $this->getServer()->getTickUsage(), $string);
		$string = str_replace("{tps}", $this->getServer()->getTicksPerSecond(), $string);
		$string = str_replace("{level_name}", $player->getLevel()->getName(), $string);
		$string = str_replace("{level_folder_name}", $player->getLevel()->getFolderName(), $string);
		$string = str_replace("{ip}", $player->getAddress(), $string);
		$string = str_replace("{ping}", $player->getPing(), $string);
		$string = str_replace("{kills}", $this->getPlayerKills($player), $string);
		$string = str_replace("{deaths}", $this->getPlayerDeaths($player), $string);
		$string = str_replace("{kdr}", $this->getPlayerKillToDeathRatio($player), $string);
		$string = str_replace("{prefix}", $this->getPrefix($player), $string);
		$string = str_replace("{suffix}", $this->getSuffix($player), $string);
		$string = str_replace("{time}", date($this->getConfig()->get("time-format")), $string);
		$string = str_replace("{cps}", $this->getClicks($player), $string);
		return $string;
	}
}<?php
declare(strict_types = 1);

namespace JackMD\ScoreHud\libs\JackMD\ScoreFactory;

use pocketmine\network\mcpe\protocol\RemoveObjectivePacket;
use pocketmine\network\mcpe\protocol\SetDisplayObjectivePacket;
use pocketmine\network\mcpe\protocol\SetScorePacket;
use pocketmine\network\mcpe\protocol\types\ScorePacketEntry;
use pocketmine\Player;
use pocketmine\Server;

class ScoreFactory{
	
	/** @var string */
	private const objectiveName = "objective";
	/** @var string */
	private const criteriaName = "dummy";
	/** @var int */
	private const MIN_LINES = 1;
	/** @var int */
	private const MAX_LINES = 15;
	/** @var int */
	public const SORT_ASCENDING = 0;
	/** @var int */
	public const SORT_DESCENDING = 1;
	/** @var string */
	public const SLOT_LIST = "list";
	/** @var string */
	public const SLOT_SIDEBAR = "sidebar";
	/** @var string */
	public const SLOT_BELOW_NAME = "belowname";
	/** @var array */
	private static $scoreboards = [];
	
	/**
	 * Adds a Scoreboard to the player if he doesn't have one.
	 * Can also be used to update a scoreboard.
	 *
	 * @param Player $player
	 * @param string $displayName
	 * @param int    $slotOrder
	 * @param string $displaySlot
	 */
	public static function setScore(Player $player, string $displayName, int $slotOrder = self::SORT_ASCENDING, string $displaySlot = self::SLOT_SIDEBAR): void{
		if(isset(self::$scoreboards[$player->getName()])){
			self::removeScore($player);
		}
		
		$pk = new SetDisplayObjectivePacket();
		$pk->displaySlot = $displaySlot;
		$pk->objectiveName = self::objectiveName;
		$pk->displayName = $displayName;
		$pk->criteriaName = self::criteriaName;
		$pk->sortOrder = $slotOrder;
		$player->sendDataPacket($pk);
		
		self::$scoreboards[$player->getName()] = self::objectiveName;
	}
	
	/**
	 * Removes a scoreboard from the player specified.
	 *
	 * @param Player $player
	 */
	public static function removeScore(Player $player): void{
		$objectiveName = self::objectiveName;
		
		$pk = new RemoveObjectivePacket();
		$pk->objectiveName = $objectiveName;
		$player->sendDataPacket($pk);
		
		if(isset(self::$scoreboards[($player->getName())])){
			unset(self::$scoreboards[$player->getName()]);
		}
	}
	
	/**
	 * Returns an array consisting of a list of the players using scoreboard.
	 *
	 * @return array
	 */
	public static function getScoreboards(): array{
		return self::$scoreboards;
	}
	
	/**
	 * Returns true or false if a player has a scoreboard or not.
	 *
	 * @param Player $player
	 * @return bool
	 */
	public static function hasScore(Player $player): bool{
		return (isset(self::$scoreboards[$player->getName()])) ? true : false;
	}
	
	/**
	 * Set a message at the line specified to the players scoreboard.
	 *
	 * @param Player $player
	 * @param int    $line
	 * @param string $message
	 */
	public static function setScoreLine(Player $player, int $line, string $message): void{
		if(!isset(self::$scoreboards[$player->getName()])){
			Server::getInstance()->getLogger()->error("Cannot set a score to a player with no scoreboard");
			return;
		}
		if($line < self::MIN_LINES || $line > self::MAX_LINES){
			Server::getInstance()->getLogger()->error("Score must be between the value of " . self::MIN_LINES .  " to " . self::MAX_LINES . ".");
			Server::getInstance()->getLogger()->error($line . " is out of range");
			return;
		}
		
		$entry = new ScorePacketEntry();
		$entry->objectiveName = self::objectiveName;
		$entry->type = $entry::TYPE_FAKE_PLAYER;
		$entry->customName = $message;
		$entry->score = $line;
		$entry->scoreboardId = $line;
		
		$pk = new SetScorePacket();
		$pk->type = $pk::TYPE_CHANGE;
		$pk->entries[] = $entry;
		$player->sendDataPacket($pk);
	}
}<?php
declare(strict_types = 1);

/**
 *     _____                    _   _           _
 *    /  ___|                  | | | |         | |
 *    \ `--.  ___ ___  _ __ ___| |_| |_   _  __| |
 *     `--. \/ __/ _ \| '__/ _ \  _  | | | |/ _` |
 *    /\__/ / (_| (_) | | |  __/ | | | |_| | (_| |
 *    \____/ \___\___/|_|  \___\_| |_/\__,_|\__,_|
 *
 * ScoreHud, a Scoreboard plugin for PocketMine-MP
 * Copyright (c) 2018 JackMD  < https://github.com/JackMD >
 *
 * Discord: JackMD#3717
 * Twitter: JackMTaylor_
 *
 * This software is distributed under "GNU General Public License v3.0".
 * This license allows you to use it and/or modify it but you are not at
 * all allowed to sell this plugin at any cost. If found doing so the
 * necessary action required would be taken.
 *
 * ScoreHud is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License v3.0 for more details.
 *
 * You should have received a copy of the GNU General Public License v3.0
 * along with this program. If not, see
 * <https://opensource.org/licenses/GPL-3.0>.
 * ------------------------------------------------------------------------
 */

namespace JackMD\ScoreHud;

use JackMD\ScoreHud\libs\JackMD\ScoreFactory\ScoreFactory;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerQuitEvent;

class EventListener implements Listener{
	
	/** @var Main */
	private $plugin;
	
	/**
	 * EventListener constructor.
	 *
	 * @param Main $plugin
	 */
	public function __construct(Main $plugin){
		$this->plugin = $plugin;
	}
	
	/**
	 * @param PlayerQuitEvent $event
	 */
	public function onQuit(PlayerQuitEvent $event){
		$player = $event->getPlayer();
		ScoreFactory::removeScore($player);
	}
}<?php
declare(strict_types = 1);

/**
 *     _____                    _   _           _
 *    /  ___|                  | | | |         | |
 *    \ `--.  ___ ___  _ __ ___| |_| |_   _  __| |
 *     `--. \/ __/ _ \| '__/ _ \  _  | | | |/ _` |
 *    /\__/ / (_| (_) | | |  __/ | | | |_| | (_| |
 *    \____/ \___\___/|_|  \___\_| |_/\__,_|\__,_|
 *
 * ScoreHud, a Scoreboard plugin for PocketMine-MP
 * Copyright (c) 2018 JackMD  < https://github.com/JackMD >
 *
 * Discord: JackMD#3717
 * Twitter: JackMTaylor_
 *
 * This software is distributed under "GNU General Public License v3.0".
 * This license allows you to use it and/or modify it but you are not at
 * all allowed to sell this plugin at any cost. If found doing so the
 * necessary action required would be taken.
 *
 * ScoreHud is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License v3.0 for more details.
 *
 * You should have received a copy of the GNU General Public License v3.0
 * along with this program. If not, see
 * <https://opensource.org/licenses/GPL-3.0>.
 * ------------------------------------------------------------------------
 */

namespace JackMD\ScoreHud\task;

use JackMD\ScoreHud\Main;
use pocketmine\scheduler\Task;

class ScoreUpdateTask extends Task{
	
	/** @var Main */
	private $plugin;
	/** @var int */
	private $titleIndex = 0;
	
	/**
	 * ScoreUpdateTask constructor.
	 *
	 * @param Main $plugin
	 */
	public function __construct(Main $plugin){
		$this->plugin = $plugin;
		$this->titleIndex = 0;
	}
	
	/**
	 * @param int $tick
	 */
	public function onRun(int $tick){
		$players = $this->plugin->getServer()->getOnlinePlayers();
		$titles = $this->plugin->getConfig()->get("server-names");
		if(!isset($titles[$this->titleIndex])){
			$this->titleIndex = 0;
		}
		foreach($players as $player){
			$this->plugin->addScore($player, $titles[$this->titleIndex]);
		}
		$this->titleIndex++;
	}
}