<?php

/*
 * MSpawns v2.2 by EvolSoft
 * Developer: Flavius12
 * Website: https://www.evolsoft.tk
 * Copyright (C) 2014-2018 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/MSpawns/blob/master/LICENSE)
 */

namespace MSpawns;

use pocketmine\Player;
use pocketmine\Server;
use pocketmine\level\Level;
use pocketmine\level\Position;
use pocketmine\plugin\PluginBase;
use pocketmine\utils\Config;

class MSpawns extends PluginBase {

    /** @var string */
	const PREFIX = "&7[&cMSpawns&7]";
	
	/** @var string */
	const API_VERSION = "2.0";
	
	/** @var array */
    public $cfg;
    
    /** @var Config */
    public $aliases;
	
    /** @var Config */
	public $spawns;
	
	/** @var Config */
	private $messages;
	
	/** @var int */
	const SUCCESS = 1;
	
	/** @var int */
	const ERR_NO_HUB = 2;
	
	/** @var int */
	const ERR_HUB_INVALID_WORLD = 3;
	
	/** @var int */
	const ERR_HUB_TRANSFER = 4;

	/** @var MSpawns */
	private static $instance = null;
	
	public function onLoad(){
	    if(!self::$instance instanceof MSpawns){
	        self::$instance = $this;
	    }
	}
	
    public function onEnable(){
        @mkdir($this->getDataFolder());
        $this->saveDefaultConfig();
        $this->saveResource("aliases.yml");
        $this->saveResource("spawns.yml");
        $this->saveResource("messages.yml");
        $this->aliases = new Config($this->getDataFolder() . "aliases.yml", Config::YAML, array());
        $this->spawns = new Config($this->getDataFolder() . "spawns.yml", Config::YAML, array());
        $this->messages = new Config($this->getDataFolder() . "messages.yml", Config::YAML);
        $this->cfg = $this->getConfig()->getAll();
        $this->getCommand("delhub")->setExecutor(new Commands\DelHub($this));
        $this->getCommand("sethub")->setExecutor(new Commands\SetHub($this));
        $this->getCommand("hub")->setExecutor(new Commands\Hub($this));
        $this->getCommand("delspawn")->setExecutor(new Commands\DelSpawn($this));
        $this->getCommand("setspawn")->setExecutor(new Commands\SetSpawn($this));
        $this->getCommand("spawn")->setExecutor(new Commands\Spawn($this));
        $this->getCommand("delalias")->setExecutor(new Commands\DelAlias($this));
        $this->getCommand("setalias")->setExecutor(new Commands\SetAlias($this));
        $this->getCommand("mspawns")->setExecutor(new Commands\Commands($this));
        if($this->cfg["enable-aliases"]){
        	$this->reloadAliases();
        }
	    $this->getServer()->getPluginManager()->registerEvents(new EventListener($this), $this);
    }
    
    /**
     * Get MSpawns API
     *
     * @return MSpawns
     */
    public static function getAPI(){
        return self::$instance;
    }
    
    /**
     * Get MSpawns version
     *
     * @return string
     */
    public function getVersion(){
        return $this->getVersion();
    }
    
    /**
     * Get MSpawns API version
     *
     * @return string
     */
    public function getAPIVersion(){
        return self::API_VERSION;
    }
    
    /**
     * Reload MSpawns configuration
     */
    public function reload(){
        $this->reloadConfig();
        $this->cfg = $this->getConfig()->getAll();
        $this->spawns->reload();
        $this->aliases->reload();
        if($this->cfg["enable-aliases"]){
            $this->reloadAliases();
        }
    }
    
    /**
     * Set world spawn
     * 
     * @param Level $level
     * @param int $x
     * @param int $y
     * @param int $z
     * @param float $yaw
     * @param float $pitch
     */
    public function setSpawn(Level $level, $x, $y, $z, $yaw, $pitch){
        $temp = array("X" => $x, "Y" => $y, "Z" => $z, "Yaw" => $yaw, "Pitch" => $pitch);
        $this->spawns->set($level->getName(), $temp);
        $this->spawns->save();
    }
    
    /**
     * Get world spawn
     *
     * @param Level $level
     * 
     * @return string|bool
     */
    public function getSpawn(Level $level){
        if($this->spawnExists($level)){
            return $this->spawns->get($level->getName());
        }
        return false;
    }
    
    /**
     * Remove world spawn
     * 
     * @param Level $level
     * 
     * @return bool
     */
    public function removeSpawn($level) : bool {
        if($this->spawns->exists($level)){
            $this->spawns->remove($level);
            $this->spawns->save();
            return true;
        }
        return false;
    }
    
    /**
     * Check if spawn exists in the specified world
     * 
     * @param Level $level
     * 
     * @return bool
     */
    public function spawnExists(Level $level) : bool {
        return $this->spawns->exists($level->getName());
    }
    
    /**
     * Teleport player to spawn
     *
     * @param Player $player
     * @param Level $level
     * 
     * @return bool
     */
    public function teleportToSpawn(Player $player, Level $level = null) : bool {
        if($level){
            $lvl = $level;
        }else{
            $lvl = $player->getLevel();
        }
        if($this->spawnExists($lvl)){
            $spawn = $this->getSpawn($lvl);
            $player->teleport(new Position($spawn["X"], $spawn["Y"], $spawn["Z"], ($level == null) ? null : $lvl), $spawn["Yaw"], $spawn["Pitch"]);
            return true;
        }
        return false;
    }
    
    /**
     * Check if force spawn is enabled in config
     * 
     * @return bool
     */
    public function isForceSpawnEnabled() : bool {
        return $this->cfg["force-spawn"];
    }
    
    /**
     * Check if spawn message is enabled in config
     * 
     * @return bool
     */
    public function isSpawnMessageEnabled() : bool {
        return $this->cfg["enable-spawn-message"];
    }
    
    /**
     * Get formatted spawn message
     * 
     * @param Player $player
     * @param Level $level
     * 
     * @return string
     */
    public function getFormattedSpawnMessage(Player $player, Level $level = null) : string {
        if(!$level){
            $level = $player->getLevel();
        }
        return $this->replaceVars($this->getMessage("spawn-message"), array("PREFIX" => self::PREFIX, "PLAYER" => $player->getName(), "WORLD" => $level->getName()));
    }
    
    /**
     * Set hub
     * 
     * @param Level $level
     * @param int $x
     * @param int $y
     * @param int $z
     * @param float $yaw
     * @param float $pitch
     */
    public function setHub(Level $level, $x, $y, $z, $yaw, $pitch){
        $this->cfg["hub"]["world"] = $level->getName();
        $this->cfg["hub"]["X"] = $x;
        $this->cfg["hub"]["Y"] = $y;
        $this->cfg["hub"]["Z"] = $z;
        $this->cfg["hub"]["Yaw"] = $yaw;
        $this->cfg["hub"]["Pitch"] = $pitch;
        $this->getConfig()->setAll($this->cfg);
        $this->getConfig()->save();
    }
    
    /**
     * Get current hub
     *
     * @return mixed|bool
     */
    public function getHub(){
        if($this->hubExists()){
            if($this->isHubExternal()){
                return $this->cfg["hub-server"];
            }
            return $this->cfg["hub"];
        }
        return false;
    }
    
    /**
     * Remove hub
     * 
     * @return bool
     */
    public function removeHub() : bool {
        if($this->hubExists()){
            if($this->isHubExternal()){
                $this->cfg["hub-server"]["enabled"] = false;
            }
            if(isset($this->cfg["hub"])){
                unset($this->cfg["hub"]);
            }
            $this->getConfig()->setAll($this->cfg);
            $this->getConfig()->save();
            return true;
        }
        return false;
    }
    
    /**
     * Check if hub exists
     *
     * @return bool
     */
    public function hubExists() : bool {
        if($this->isHubExternal()){
            return true;
        }
        return isset($this->cfg["hub"]);
    }
    
    /**
     * Teleport player to hub
     * 
     * @param Player $player
     * 
     * @return int
     */
    public function teleportToHub(Player $player) : int {
        if(!$this->hubExists()){
            return self::ERR_NO_HUB;
        }
        $hub = $this->getHub();
        if($this->isHubExternal()){
            return $player->transfer($hub["host"], $hub["port"]) ? self::SUCCESS : self::ERR_HUB_TRANSFER;
        }
        if(strcasecmp($player->getLevel()->getName(), $hub["world"]) != 0){
            if(!Server::getInstance()->loadLevel($hub["world"])){
                return self::ERR_HUB_INVALID_WORLD;
            }
            $level = $this->getServer()->getLevelByName($hub["world"]);
            $player->teleport(new Position($hub["X"], $hub["Y"], $hub["Z"], $level), $hub["Yaw"], $hub["Pitch"]);
            return self::SUCCESS;
        }
        $player->teleport(new Position($hub["X"], $hub["Y"], $hub["Z"]), $hub["Yaw"], $hub["Pitch"]);
        return self::SUCCESS;
    }
    
    /**
     * Check if force hub is enabled in config
     *
     * @return bool
     */
    public function isForceHubEnabled() : bool {
        return $this->cfg["force-hub"];
    }
    
    /**
     * Check if hub message is enabled in config
     *
     * @return bool
     */
    public function isHubMessageEnabled() : bool {
        return $this->cfg["enable-hub-message"];
    }
    
    /**
     * Check if the hub is an external server
     *
     * @return bool
     */
    public function isHubExternal() : bool {
        return $this->cfg["hub-server"]["enabled"];
    }
    
    /**
     * Get hub name
     * 
     * @return string
     */
    public function getHubName() : ?string {
        if($this->hubExists()){
            if($this->isHubExternal()){
                return $this->cfg["hub-server"]["name"];
            }
            return $this->cfg["hub"]["world"];
        }
        return null;
    }
    
    /**
     * Get formatted hub message
     * 
     * @param Player $player
     * 
     * @return string
     */
    public function getFormattedHubMessage(Player $player) : string {
        return $this->replaceVars($this->getMessage("hub-message"), array("PREFIX" => self::PREFIX, "PLAYER" => $player->getName(), "WORLD" => $this->getHubName()));
    }
    
    /**
     * Reload aliases
     */
    public function reloadAliases(){
        foreach($this->aliases->getAll() as $cmd => $target){
            $this->getServer()->getCommandMap()->register($cmd, new Alias($this, $cmd, "MSpawns alias for world " . $target . "'s spawn"));
        }
    }
    
    /**
     * Check if alias exists
     * 
     * @param string $id
     * 
     * @return bool
     */
    public function aliasExists($id) : bool {
        return $this->aliases->exists($id);
    }
    
    /**
     * Set alias
     * 
     * @param string $id
     * @param string $target
     * 
     * @return bool
     */
    public function setAlias($id, $target) : bool {
        if(!$this->spawns->exists($target)){
            return false;
        }
        $this->aliases->set($id, $target);
        $this->aliases->save();
        $this->getServer()->getCommandMap()->register($id, new Alias($this, $id, "MSpawns alias for world " . $target . "'s spawn"));
        return true;
    }
    
    /**
     * Get alias
     * 
     * @param string $id
     * 
     * @return mixed|bool
     */
    public function getAlias($id){
        if($this->aliasExists($id)){
            return $this->aliases->get($id);
        }
        return false;
    }
    
    /**
     * Remove alias
     * 
     * @param string $id
     * 
     * @return bool
     */
    public function removeAlias($id) : bool {
        if(!$this->aliasExists($id)){
            return false;
        }
        $this->aliases->remove($id);
        $this->aliases->save();
        $cmd = $this->getServer()->getCommandMap()->getCommand($id);
        if($cmd){
            $this->getServer()->getCommandMap()->unregister($cmd);
        }
        return true;
    }
    
    /**
     * Get MSpawns message
     * 
     * @param string $id
     * 
     * @return string|bool
     */
    public function getMessage($id){
        if($this->messages->exists($id)){
            return $this->messages->get($id);
        }
        return false;
    }
    
    /**
     * Replace variables inside a string
     * 
     * @param string $str
     * @param array $vars
     * 
     * @return string
     */
    public function replaceVars($str, array $vars){
        foreach($vars as $key => $value){
            $str = str_replace("{" . $key . "}", $value, $str);
        }
        return $str;
    }
}---
#Hub message
hub-message: "{PREFIX} &bWelcome to Hub, &a{PLAYER}"
#No hub message
no-hub: "{PREFIX} &cNo hub set"
#Spawn message
spawn-message: "{PREFIX} &bTeleported to &e{WORLD}&b Spawn"
#No spawn message
no-spawn: "{PREFIX} &cNo spawn found in this world"
#Invalid world
invalid-world: "{PREFIX} &cWorld not found"
#Spawn aliases disabled
aliases-disabled: "{PREFIX} &cSpawn aliases are disabled on this server"
...<?php

/*
 * MSpawns v2.2 by EvolSoft
 * Developer: Flavius12
 * Website: https://www.evolsoft.tk
 * Copyright (C) 2014-2018 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/MSpawns/blob/master/LICENSE)
 */

namespace MSpawns\Commands;

use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\command\PluginCommand;
use pocketmine\utils\TextFormat;

use MSpawns\MSpawns;

class DelHub extends PluginCommand implements CommandExecutor {
    
    /** @var MSpawns */
    private $plugin;
    
    public function __construct(MSpawns $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) : bool {
        if($sender->hasPermission("mspawns.delhub")){
            if($this->plugin->removeHub()){
                $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&a Hub deleted"));
            }else{
                $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c No hub set"));
            }
        }else{
            $sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
        }
        return true;
    }
}
<?php

/*
 * MSpawns v2.2 by EvolSoft
 * Developer: Flavius12
 * Website: https://www.evolsoft.tk
 * Copyright (C) 2014-2018 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/MSpawns/blob/master/LICENSE)
 */

namespace MSpawns\Commands;

use pocketmine\Player;
use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\command\PluginCommand;
use pocketmine\utils\TextFormat;

use MSpawns\MSpawns;

class SetHub extends PluginCommand implements CommandExecutor {
	
	public function __construct(MSpawns $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) : bool {
		if($sender instanceof Player){
			if($sender->hasPermission("mspawns.sethub")){
			    if($this->plugin->isHubExternal()){
			        $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&e Your hub is currently set on an external server. Disable that feature to set a local hub."));
			    }
			    $this->plugin->setHub($sender->getLevel(), $sender->getX(), $sender->getY(), $sender->getZ(), $sender->getYaw(), $sender->getPitch());
			    $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&a Hub set on world &e" . $sender->getLevel()->getName()));
			}else{
				$sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
			}
		}else{
			$sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c You can only perform this command as a player"));
		}
    	return true;
    }
}
<?php

/*
 * MSpawns v2.2 by EvolSoft
 * Developer: Flavius12
 * Website: https://www.evolsoft.tk
 * Copyright (C) 2014-2018 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/MSpawns/blob/master/LICENSE)
 */

namespace MSpawns\Commands;

use pocketmine\Player;
use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\command\PluginCommand;
use pocketmine\utils\TextFormat;

use MSpawns\MSpawns;

class Hub extends PluginCommand implements CommandExecutor {
    
    /** @var MSpawns */
    private $plugin;
	
	public function __construct(MSpawns $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) : bool {
		if($sender instanceof Player){
			if($sender->hasPermission("mspawns.hub")){
			    switch($this->plugin->teleportToHub($sender)){
			        case MSpawns::ERR_HUB_INVALID_WORLD:
			            $sender->sendMessage(TextFormat::colorize($this->plugin->replaceVars($this->plugin->getMessage("invalid-world"), array("PREFIX" => MSpawns::PREFIX, "PLAYER" => $sender->getName(), "WORLD" => $this->plugin->getHubName()))));
			            break;
			        case MSpawns::ERR_NO_HUB:
			            $sender->sendMessage(TextFormat::colorize($this->plugin->replaceVars($this->plugin->getMessage("no-hub"), array("PREFIX" => MSpawns::PREFIX, "PLAYER" => $sender->getName(), "WORLD" => $this->plugin->getHubName()))));
			            break;
			        case MSpawns::ERR_HUB_TRANSFER:
			            $sender->sendMessage(TextFormat::colorize($this->plugin->replaceVars($this->plugin->getMessage("transfer-error"), array("PREFIX" => MSpawns::PREFIX, "PLAYER" => $sender->getName(), "WORLD" => $this->plugin->getHubName()))));
			            break;
			        default:
			        case MSpawns::SUCCESS:
			            if($this->plugin->isHubMessageEnabled()){
			                $sender->sendMessage(TextFormat::colorize($this->plugin->getFormattedHubMessage($sender)));
			            }
			            break;
			    }
			}else{
				$sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
			}
		}else{
			$sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c You can only perform this command as a player"));
		}
    	return true;
    }
}
<?php

/*
 * MSpawns v2.2 by EvolSoft
 * Developer: Flavius12
 * Website: https://www.evolsoft.tk
 * Copyright (C) 2014-2018 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/MSpawns/blob/master/LICENSE)
 */

namespace MSpawns\Commands;

use pocketmine\Player;
use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\command\PluginCommand;
use pocketmine\utils\TextFormat;

use MSpawns\MSpawns;

class DelSpawn extends PluginCommand implements CommandExecutor {
    
    /** @var MSpawns */
    private $plugin;
    
    public function __construct(MSpawns $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) : bool {
        if($sender->hasPermission("mspawns.delspawn")){
            if(isset($args[0])){
                $level = $args[0];
                goto delspw;
            }else{
                if($sender instanceof Player){
                    $level = $sender->getLevel()->getName();
                    delspw:
                        if($this->plugin->removeSpawn($level)){
                            $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&a Spawn removed on world &e" . $level));
                        }else{
                            $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c No spawn found on world " . $level));
                        }
                }else{
                    $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c Usage /delspawn <world>"));
                }
            }
        }else{
            $sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
        }
        return true;
    }
}
<?php

/*
 * MSpawns v2.2 by EvolSoft
 * Developer: Flavius12
 * Website: https://www.evolsoft.tk
 * Copyright (C) 2014-2018 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/MSpawns/blob/master/LICENSE)
 */

namespace MSpawns\Commands;

use pocketmine\Player;
use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\command\PluginCommand;
use pocketmine\utils\TextFormat;

use MSpawns\MSpawns;

class SetSpawn extends PluginCommand implements CommandExecutor {
    
    /** @var MSpawns */
    private $plugin;
	
	public function __construct(MSpawns $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) : bool {
		if($sender instanceof Player){
			if($sender->hasPermission("mspawns.setspawn")){
				$this->plugin->setSpawn($sender->getLevel(), $sender->getX(), $sender->getY(), $sender->getZ(), $sender->getYaw(), $sender->getPitch());
				$sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&a Spawn set on world &e" . $sender->getLevel()->getName()));
			}else{
				$sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
			}
		}else{
			$sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c You can only perform this command as a player"));
		}
    	return true;
    }
}
<?php

/*
 * MSpawns v2.2 by EvolSoft
 * Developer: Flavius12
 * Website: https://www.evolsoft.tk
 * Copyright (C) 2014-2018 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/MSpawns/blob/master/LICENSE)
 */

namespace MSpawns\Commands;

use pocketmine\Player;
use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\command\PluginCommand;
use pocketmine\utils\TextFormat;

use MSpawns\MSpawns;

class Spawn extends PluginCommand implements CommandExecutor {
    
    /** @var MSpawns */
    private $plugin;
	
	public function __construct(MSpawns $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) : bool {
        if($sender instanceof Player){
			if($sender->hasPermission("mspawns.spawn")){
				if($this->plugin->teleportToSpawn($sender)){
				    if($this->plugin->isSpawnMessageEnabled()){
				        $sender->sendMessage(TextFormat::colorize($this->plugin->getFormattedSpawnMessage($sender)));
				    }
				}else{
				    $sender->sendMessage(TextFormat::colorize($this->plugin->replaceVars($this->plugin->getMessage("no-spawn"), array("PREFIX" => MSpawns::PREFIX, "PLAYER" => $sender->getName(), "WORLD" => $sender->getLevel()->getName()))));
				}
			}else{
			    $sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
			}
		}else{
		    $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c You can only perform this command as a player"));
		}
    	return true;
    }
}
<?php

/*
 * MSpawns v2.2 by EvolSoft
 * Developer: Flavius12
 * Website: https://www.evolsoft.tk
 * Copyright (C) 2014-2018 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/MSpawns/blob/master/LICENSE)
 */

namespace MSpawns\Commands;

use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\command\PluginCommand;
use pocketmine\utils\TextFormat;

use MSpawns\MSpawns;

class DelAlias extends PluginCommand implements CommandExecutor {
    
    /** @var MSpawns */
    private $plugin;
    
    public function __construct(MSpawns $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) : bool {
        if($sender->hasPermission("mspawns.delalias")){
            if(isset($args[0])){
                if($this->plugin->removeAlias($args[0])){
                    $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&a Alias " . $args[0] . " removed"));
                }else{
                    $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c Alias " . $args[0] . " doesn't exist"));
                }
            }else{
                $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c Usage /delalias <alias>"));
            }
        }else{
            $sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
        }
        return true;
    }
}
<?php

/*
 * MSpawns v2.2 by EvolSoft
 * Developer: Flavius12
 * Website: https://www.evolsoft.tk
 * Copyright (C) 2014-2018 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/MSpawns/blob/master/LICENSE)
 */

namespace MSpawns\Commands;

use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\command\PluginCommand;
use pocketmine\utils\TextFormat;

use MSpawns\MSpawns;

class SetAlias extends PluginCommand implements CommandExecutor {
    
    /** @var MSpawns */
    private $plugin;
	
	public function __construct(MSpawns $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) : bool {
		if($sender->hasPermission("mspawns.setalias")){
			if(isset($args[0]) && isset($args[1])){
				if($this->plugin->setAlias($args[0], $args[1])){
					$sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&a Alias &e" . $args[0] ."&a set to &e" . $args[1]));
				}else{
					$sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c Can't set alias. No spawn found in world " . $args[1]));
				}
			}else{
				$sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c Usage /setalias <name> <target>"));
			}
		}else{
			$sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
		}
    	return true;
    }	
}
<?php

/*
 * MSpawns v2.2 by EvolSoft
 * Developer: Flavius12
 * Website: https://www.evolsoft.tk
 * Copyright (C) 2014-2018 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/MSpawns/blob/master/LICENSE)
 */

namespace MSpawns\Commands;

use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;
use pocketmine\command\PluginCommand;
use pocketmine\utils\TextFormat;

use MSpawns\MSpawns;

class Commands extends PluginCommand implements CommandExecutor {
    
    /** @var MSpawns */
    private $plugin;
	
	public function __construct(MSpawns $plugin){
        $this->plugin = $plugin;
    }
    
    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args) : bool {
	   	if(isset($args[0])){
	   		$args[0] = strtolower($args[0]);
	   		switch($args[0]){
	   		    case "help":
	   		        goto help;
	   		    case "info":
	   		        if($sender->hasPermission("mspawns.info")){
	   		            $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&6 MSpawns &cv" . $this->plugin->getDescription()->getVersion() . "&6 developed by &cEvolSoft"));
	   		            $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&6 Website &c" . $this->plugin->getDescription()->getWebsite()));
	   		            break;
	   		        }
	   		        $sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
	   		        break;
	   		    case "reload":
	   		        if($sender->hasPermission("mspawns.reload")){
	   		            $this->plugin->reload();
	   		            $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&a Configuration Reloaded."));
	   		            break;
	   		        }
	   		        $sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
	   		        break;
	   		    default:
	   		        if($sender->hasPermission("mspawns")){
	   		            $sender->sendMessage(TextFormat::colorize(MSpawns::PREFIX . "&c Subcommand &b" . $args[0] . " &cnot found. Use &b/ms &cto see available commands"));
	   		            break;
	   		        }
	   		        $sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
	   		        break;
	   		}
	   		return true;
	   	}
	   	help:
	   	if($sender->hasPermission("mspawns")){
	   	    $sender->sendMessage(TextFormat::colorize("&c>> &6Available Commands &c<<"));
	   	    $sender->sendMessage(TextFormat::colorize("&6/sethub &c>> &6Set hub"));
	   	    $sender->sendMessage(TextFormat::colorize("&6/delhub &c>> &6Delete hub"));
	   	    $sender->sendMessage(TextFormat::colorize("&6/hub &c>> &6Teleport player to hub"));
	   	    $sender->sendMessage(TextFormat::colorize("&6/setspawn &c>> &6Set world spawn"));
	   	    $sender->sendMessage(TextFormat::colorize("&6/delspawn &c>> &6Delete world spawn"));
	   	    $sender->sendMessage(TextFormat::colorize("&6/spawn &c>> &6Teleport player to world spawn"));
	   	    $sender->sendMessage(TextFormat::colorize("&6/setalias &c>> &6Set alias"));
	   	    $sender->sendMessage(TextFormat::colorize("&6/delalias &c>> &6Delete alias"));
	   	    $sender->sendMessage(TextFormat::colorize("&6/ms info &c>> &6Show info about this plugin"));
	   	    $sender->sendMessage(TextFormat::colorize("&6/ms reload &c>> &6Reload the config"));
	   	    return true;
   	   }
   	   $sender->sendMessage(TextFormat::colorize("&cYou don't have permissions to use this command"));
	   return true;
    }
}
<?php

/*
 * MSpawns v2.2 by EvolSoft
 * Developer: Flavius12
 * Website: https://www.evolsoft.tk
 * Copyright (C) 2014-2018 EvolSoft
 * Licensed under MIT (https://github.com/EvolSoft/MSpawns/blob/master/LICENSE)
 */

namespace MSpawns;

use pocketmine\Player;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerJoinEvent;
use pocketmine\event\player\PlayerRespawnEvent;
use pocketmine\level\Position;
use pocketmine\utils\TextFormat;

class EventListener implements Listener {
    
    /** @var MSpawns */
    private $plugin;
	
	public function __construct(MSpawns $plugin){
        $this->plugin = $plugin;
    }
    
    /* Possible implementation later
     * public function onWorldChange(EntityLevelChangeEvent $event){
    	$entity = $event->getEntity();
    	//Check if Entity is a Player
    	if($entity instanceof Player){
    		//Check Force Spawn
    		if($this->plugin->getForceSpawn()){
    			$this->plugin->teleportToSpawn_2($entity, $event->getTarget());
    		}
    	}
    }*/
    
    /**
     * @param PlayerRespawnEvent $event
     */
    public function onPlayerRespawn(PlayerRespawnEvent $event){
    	$this->cfg = $this->plugin->getConfig()->getAll();
    	$player = $event->getPlayer();
    	//Check if the victim is a Player
    	if($player instanceof Player){
    		//Teleport Player on Death: 1 = Teleport to spawn 2 = Teleport to Hub
    		if($this->cfg["teleport-on-death"] == 1){
    			//Check if spawn exists
    			if($this->plugin->spawnExists($player->getLevel())){
    				$pos = $this->plugin->getSpawn($player->getLevel());
    				$event->setRespawnPosition(new Position($pos["X"], $pos["Y"], $pos["Z"]), $pos["Yaw"], $pos["Pitch"]);
    			}
    		}elseif($this->cfg["teleport-on-death"] == 2){
    			//Check if hub exists
    			if($this->plugin->hubExists()){
    				$this->plugin->teleportToHub($player);
    			}
    		}
    	}
    }
    
    /**
     * @param PlayerJoinEvent $event
     */
    public function onPlayerJoin(PlayerJoinEvent $event){
    	$player = $event->getPlayer();
    	if($this->plugin->isForceHubEnabled()){
    	    switch($this->plugin->teleportToHub($player)){
    	        case MSpawns::ERR_HUB_INVALID_WORLD:
    	            $player->sendMessage(TextFormat::colorize($this->plugin->replaceVars($this->plugin->getMessage("invalid-world"), array("PREFIX" => MSpawns::PREFIX, "PLAYER" => $player->getName(), "WORLD" => $this->plugin->getHubName()))));
    	            break;
    	        case MSpawns::ERR_NO_HUB:
    	            $player->sendMessage(TextFormat::colorize($this->plugin->replaceVars($this->plugin->getMessage("no-hub"), array("PREFIX" => MSpawns::PREFIX, "PLAYER" => $player->getName(), "WORLD" => $this->plugin->getHubName()))));
    	            break;
    	        case MSpawns::ERR_HUB_TRANSFER:
    	            $player->sendMessage(TextFormat::colorize($this->plugin->replaceVars($this->plugin->getMessage("transfer-error"), array("PREFIX" => MSpawns::PREFIX, "PLAYER" => $player->getName(), "WORLD" => $this->plugin->getHubName()))));
    	            break;
    	        default:
    	        case MSpawns::SUCCESS:
    	            if($this->plugin->cfg["show-messages-onjoin"] && $this->plugin->isHubMessageEnabled()){
    	                $player->sendMessage(TextFormat::colorize($this->plugin->getFormattedHubMessage($player)));
    	            }
    	            break;
    	    }
    	}else if($this->plugin->isForceSpawnEnabled()){
    		if($this->plugin->teleportToSpawn($player)){
    		    if($this->plugin->cfg["show-messages-onjoin"] && $this->plugin->isSpawnMessageEnabled()){
    		        $player->sendMessage(TextFormat::colorize($this->plugin->getFormattedSpawnMessage($player)));
    		    }
    		}else{
    		    $player->sendMessage(TextFormat::colorize($this->plugin->replaceVars($this->plugin->getMessage("no-spawn"), array("PREFIX" => MSpawns::PREFIX, "PLAYER" => $player->getName(), "WORLD" => $player->getLevel()))));
    		}
    	}
    }
}
